{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About arc42 arc42, the Template for documentation of software and system architecture. By Dr. Gernot Starke, Dr. Peter Hruschka and contributors. Template Revision: 7.0 EN (based on asciidoc), January 2017 \u00a9 We acknowledge that this document uses material from the arc 42 architecture template, http://www.arc42.de . Created by Dr. Peter Hruschka & Dr. Gernot Starke. Introduction and Goals {#section-introduction-and-goals} Requirements Overview {#_requirements_overview} Quality Goals {#_quality_goals} Stakeholders {#_stakeholders} +-------------+---------------------------+---------------------------+ | Role/Name | Contact | Expectations | +=============+===========================+===========================+ | * | \\<Contact-1> | \\<Expectation-1> | | \\<Role-1> | | | +-------------+---------------------------+---------------------------+ | * | \\<Contact-2> | \\<Expectation-2> | | \\<Role-2> | | | +-------------+---------------------------+---------------------------+ Architecture Constraints {#section-architecture-constraints} System Scope and Context {#section-system-scope-and-context} Business Context {#_business_context} \\<Diagram or Table> \\<optionally: Explanation of external domain interfaces> Technical Context {#_technical_context} \\<Diagram or Table> \\<optionally: Explanation of technical interfaces> \\<Mapping Input/Output to Channels> Solution Strategy {#section-solution-strategy} Building Block View {#section-building-block-view} Whitebox Overall System {#_whitebox_overall_system} \\<Overview Diagram> Motivation : \\<text explanation> Contained Building Blocks : \\<Description of contained building block (black boxes)> Important Interfaces : \\<Description of important interfaces> \\<Name black box 1> {#__name_black_box_1} \\<Purpose/Responsibility> \\<Interface(s)> \\<(Optional) Quality/Performance Characteristics> \\<(Optional) Directory/File Location> \\<(Optional) Fulfilled Requirements> \\<(optional) Open Issues/Problems/Risks> \\<Name black box 2> {#__name_black_box_2} \\<black box template> \\<Name black box n> {#__name_black_box_n} \\<black box template> \\<Name interface 1> {#__name_interface_1} ... \\<Name interface m> {#__name_interface_m} Level 2 {#_level_2} White Box \\<building block 1> {#_white_box_emphasis_building_block_1_emphasis} \\<white box template> White Box \\<building block 2> {#_white_box_emphasis_building_block_2_emphasis} \\<white box template> ... White Box \\<building block m> {#_white_box_emphasis_building_block_m_emphasis} \\<white box template> Level 3 {#_level_3} White Box \\<_building block x.1_> {#_white_box_building_block_x_1} \\<white box template> White Box \\<_building block x.2_> {#_white_box_building_block_x_2} \\<white box template> White Box \\<_building block y.1_> {#_white_box_building_block_y_1} \\<white box template> Runtime View {#section-runtime-view} \\<Runtime Scenario 1> {#__runtime_scenario_1} \\<insert runtime diagram or textual description of the scenario> \\<insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.> \\<Runtime Scenario 2> {#__runtime_scenario_2} ... {#_} \\<Runtime Scenario n> {#__runtime_scenario_n} Deployment View {#section-deployment-view} Infrastructure Level 1 {#_infrastructure_level_1} \\<Overview Diagram> Motivation : \\<explanation in text form> Quality and/or Performance Features : \\<explanation in text form> Mapping of Building Blocks to Infrastructure : \\<description of the mapping> Infrastructure Level 2 {#_infrastructure_level_2} \\<Infrastructure Element 1> {#__emphasis_infrastructure_element_1_emphasis} \\<diagram + explanation> \\<Infrastructure Element 2> {#__emphasis_infrastructure_element_2_emphasis} \\<diagram + explanation> ... \\<Infrastructure Element n> {#__emphasis_infrastructure_element_n_emphasis} \\<diagram + explanation> Cross-cutting Concepts {#section-concepts} \\<Concept 1> {#__emphasis_concept_1_emphasis} \\<explanation> \\<Concept 2> {#__emphasis_concept_2_emphasis} \\<explanation> ... \\<Concept n> {#__emphasis_concept_n_emphasis} \\<explanation> Design Decisions {#section-design-decisions} Quality Requirements {#section-quality-scenarios} Quality Tree {#_quality_tree} Quality Scenarios {#_quality_scenarios} Risks and Technical Debts {#section-technical-risks} Glossary {#section-glossary} +-----------------------+-----------------------------------------------+ | Term | Definition | +=======================+===============================================+ | \\<Term-1> | \\<definition-1> | +-----------------------+-----------------------------------------------+ | \\<Term-2> | \\<definition-2> | +-----------------------+-----------------------------------------------+","title":"Home"},{"location":"#introduction-and-goals-section-introduction-and-goals","text":"","title":"Introduction and Goals {#section-introduction-and-goals}"},{"location":"#requirements-overview-_requirements_overview","text":"","title":"Requirements Overview {#_requirements_overview}"},{"location":"#quality-goals-_quality_goals","text":"","title":"Quality Goals {#_quality_goals}"},{"location":"#stakeholders-_stakeholders","text":"+-------------+---------------------------+---------------------------+ | Role/Name | Contact | Expectations | +=============+===========================+===========================+ | * | \\<Contact-1> | \\<Expectation-1> | | \\<Role-1> | | | +-------------+---------------------------+---------------------------+ | * | \\<Contact-2> | \\<Expectation-2> | | \\<Role-2> | | | +-------------+---------------------------+---------------------------+","title":"Stakeholders {#_stakeholders}"},{"location":"#architecture-constraints-section-architecture-constraints","text":"","title":"Architecture Constraints {#section-architecture-constraints}"},{"location":"#system-scope-and-context-section-system-scope-and-context","text":"","title":"System Scope and Context {#section-system-scope-and-context}"},{"location":"#business-context-_business_context","text":"\\<Diagram or Table> \\<optionally: Explanation of external domain interfaces>","title":"Business Context {#_business_context}"},{"location":"#technical-context-_technical_context","text":"\\<Diagram or Table> \\<optionally: Explanation of technical interfaces> \\<Mapping Input/Output to Channels>","title":"Technical Context {#_technical_context}"},{"location":"#solution-strategy-section-solution-strategy","text":"","title":"Solution Strategy {#section-solution-strategy}"},{"location":"#building-block-view-section-building-block-view","text":"","title":"Building Block View {#section-building-block-view}"},{"location":"#whitebox-overall-system-_whitebox_overall_system","text":"\\<Overview Diagram> Motivation : \\<text explanation> Contained Building Blocks : \\<Description of contained building block (black boxes)> Important Interfaces : \\<Description of important interfaces>","title":"Whitebox Overall System {#_whitebox_overall_system}"},{"location":"#name-black-box-1-__name_black_box_1","text":"\\<Purpose/Responsibility> \\<Interface(s)> \\<(Optional) Quality/Performance Characteristics> \\<(Optional) Directory/File Location> \\<(Optional) Fulfilled Requirements> \\<(optional) Open Issues/Problems/Risks>","title":"\\&lt;Name black box 1> {#__name_black_box_1}"},{"location":"#name-black-box-2-__name_black_box_2","text":"\\<black box template>","title":"\\&lt;Name black box 2> {#__name_black_box_2}"},{"location":"#name-black-box-n-__name_black_box_n","text":"\\<black box template>","title":"\\&lt;Name black box n> {#__name_black_box_n}"},{"location":"#name-interface-1-__name_interface_1","text":"...","title":"\\&lt;Name interface 1> {#__name_interface_1}"},{"location":"#name-interface-m-__name_interface_m","text":"","title":"\\&lt;Name interface m> {#__name_interface_m}"},{"location":"#level-2-_level_2","text":"","title":"Level 2 {#_level_2}"},{"location":"#white-box-building-block-1-_white_box_emphasis_building_block_1_emphasis","text":"\\<white box template>","title":"White Box \\&lt;building block 1> {#_white_box_emphasis_building_block_1_emphasis}"},{"location":"#white-box-building-block-2-_white_box_emphasis_building_block_2_emphasis","text":"\\<white box template> ...","title":"White Box \\&lt;building block 2> {#_white_box_emphasis_building_block_2_emphasis}"},{"location":"#white-box-building-block-m-_white_box_emphasis_building_block_m_emphasis","text":"\\<white box template>","title":"White Box \\&lt;building block m> {#_white_box_emphasis_building_block_m_emphasis}"},{"location":"#level-3-_level_3","text":"","title":"Level 3 {#_level_3}"},{"location":"#white-box-_building-block-x1_-_white_box_building_block_x_1","text":"\\<white box template>","title":"White Box \\&lt;_building block x.1_> {#_white_box_building_block_x_1}"},{"location":"#white-box-_building-block-x2_-_white_box_building_block_x_2","text":"\\<white box template>","title":"White Box \\&lt;_building block x.2_> {#_white_box_building_block_x_2}"},{"location":"#white-box-_building-block-y1_-_white_box_building_block_y_1","text":"\\<white box template>","title":"White Box \\&lt;_building block y.1_> {#_white_box_building_block_y_1}"},{"location":"#runtime-view-section-runtime-view","text":"","title":"Runtime View {#section-runtime-view}"},{"location":"#runtime-scenario-1-__runtime_scenario_1","text":"\\<insert runtime diagram or textual description of the scenario> \\<insert description of the notable aspects of the interactions between the building block instances depicted in this diagram.>","title":"\\&lt;Runtime Scenario 1> {#__runtime_scenario_1}"},{"location":"#runtime-scenario-2-__runtime_scenario_2","text":"","title":"\\&lt;Runtime Scenario 2> {#__runtime_scenario_2}"},{"location":"#_","text":"","title":"... {#_}"},{"location":"#runtime-scenario-n-__runtime_scenario_n","text":"","title":"\\&lt;Runtime Scenario n> {#__runtime_scenario_n}"},{"location":"#deployment-view-section-deployment-view","text":"","title":"Deployment View {#section-deployment-view}"},{"location":"#infrastructure-level-1-_infrastructure_level_1","text":"\\<Overview Diagram> Motivation : \\<explanation in text form> Quality and/or Performance Features : \\<explanation in text form> Mapping of Building Blocks to Infrastructure : \\<description of the mapping>","title":"Infrastructure Level 1 {#_infrastructure_level_1}"},{"location":"#infrastructure-level-2-_infrastructure_level_2","text":"","title":"Infrastructure Level 2 {#_infrastructure_level_2}"},{"location":"#infrastructure-element-1-__emphasis_infrastructure_element_1_emphasis","text":"\\<diagram + explanation>","title":"\\&lt;Infrastructure Element 1> {#__emphasis_infrastructure_element_1_emphasis}"},{"location":"#infrastructure-element-2-__emphasis_infrastructure_element_2_emphasis","text":"\\<diagram + explanation> ...","title":"\\&lt;Infrastructure Element 2> {#__emphasis_infrastructure_element_2_emphasis}"},{"location":"#infrastructure-element-n-__emphasis_infrastructure_element_n_emphasis","text":"\\<diagram + explanation>","title":"\\&lt;Infrastructure Element n> {#__emphasis_infrastructure_element_n_emphasis}"},{"location":"#cross-cutting-concepts-section-concepts","text":"","title":"Cross-cutting Concepts {#section-concepts}"},{"location":"#concept-1-__emphasis_concept_1_emphasis","text":"\\<explanation>","title":"\\&lt;Concept 1> {#__emphasis_concept_1_emphasis}"},{"location":"#concept-2-__emphasis_concept_2_emphasis","text":"\\<explanation> ...","title":"\\&lt;Concept 2> {#__emphasis_concept_2_emphasis}"},{"location":"#concept-n-__emphasis_concept_n_emphasis","text":"\\<explanation>","title":"\\&lt;Concept n> {#__emphasis_concept_n_emphasis}"},{"location":"#design-decisions-section-design-decisions","text":"","title":"Design Decisions {#section-design-decisions}"},{"location":"#quality-requirements-section-quality-scenarios","text":"","title":"Quality Requirements {#section-quality-scenarios}"},{"location":"#quality-tree-_quality_tree","text":"","title":"Quality Tree {#_quality_tree}"},{"location":"#quality-scenarios-_quality_scenarios","text":"","title":"Quality Scenarios {#_quality_scenarios}"},{"location":"#risks-and-technical-debts-section-technical-risks","text":"","title":"Risks and Technical Debts {#section-technical-risks}"},{"location":"#glossary-section-glossary","text":"+-----------------------+-----------------------------------------------+ | Term | Definition | +=======================+===============================================+ | \\<Term-1> | \\<definition-1> | +-----------------------+-----------------------------------------------+ | \\<Term-2> | \\<definition-2> | +-----------------------+-----------------------------------------------+","title":"Glossary {#section-glossary}"},{"location":"4%2B1-View/","text":"4+1 - View Deployment View DB und Web Client sind noch nicht umgesetzt, w\u00fcrden aber so hineinpassen. Logical View Siehe C4 Diagramme. Implementation View CarRent.Backend Solution CarRent.Backend API v1 Cars --> Controller und DTOs Contracts --> Controller und DTOs Customers --> Controller und DTOs (Theoretisch v2) Application // Theoretisch ablage von Services. Domain --> Sp\u00e4ter enth\u00e4lt er die Micro Services Cars --> Enth\u00e4lt Domain Objects zum Typ Car. Brand Car CarClass ICarRepository Contracts--> Enth\u00e4lt Domain Objects zu den Contracttypen IContract IRentContractRepository IReservationContractRepository IRentContractRepository RentContract ReservationContract Customers --> Enth\u00e4lt alle Domain Objects zum Customer Customer ICustomerRepository Infrastructure --> Enth\u00e4lt klassen mit Db-Zugriffen Persistance CareRentDbContext CarRepository CustomerRepository RentContractRepository ReservationContractRepository","title":"4+1 - View"},{"location":"4%2B1-View/#41-view","text":"","title":"4+1 - View"},{"location":"4%2B1-View/#deployment-view","text":"DB und Web Client sind noch nicht umgesetzt, w\u00fcrden aber so hineinpassen.","title":"Deployment View"},{"location":"4%2B1-View/#logical-view","text":"Siehe C4 Diagramme.","title":"Logical View"},{"location":"4%2B1-View/#implementation-view","text":"CarRent.Backend Solution CarRent.Backend API v1 Cars --> Controller und DTOs Contracts --> Controller und DTOs Customers --> Controller und DTOs (Theoretisch v2) Application // Theoretisch ablage von Services. Domain --> Sp\u00e4ter enth\u00e4lt er die Micro Services Cars --> Enth\u00e4lt Domain Objects zum Typ Car. Brand Car CarClass ICarRepository Contracts--> Enth\u00e4lt Domain Objects zu den Contracttypen IContract IRentContractRepository IReservationContractRepository IRentContractRepository RentContract ReservationContract Customers --> Enth\u00e4lt alle Domain Objects zum Customer Customer ICustomerRepository Infrastructure --> Enth\u00e4lt klassen mit Db-Zugriffen Persistance CareRentDbContext CarRepository CustomerRepository RentContractRepository ReservationContractRepository","title":"Implementation View"},{"location":"C4/","text":"Big Picture via C4-Pattern Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage (Start/Enddatum) angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt. Context classDiagram PotentialCustomer -- User : Calls User -- CarRentWebApp : Interacts with CarRentWebApp -- CarRentAPI : Interacts with Container classDiagram CarRentBackend <--> CarRentFrontend : Transfair of Domain Objects CarRentBackend --> ContractMicroService : Returns CarRentBackend --> ContractMicroService Components Car Via CarController und Repo k\u00f6nnnen Autos verwaltet werden. ReservationContract Via ReservationContractController und Repo k\u00f6nnen Reservationen verwaltet werden. RentContract Via RentContractController und Repo k\u00f6nnen Reservationen in Mietvertr\u00e4ge umgewandelt werden und diese verwaltet werden. Customer Via CustomerController und Repo k\u00f6nnen Kunden verwaltet werden. Classes mermaid-link classDiagram CarClass \"x\" <|-- \"y\" SimpleCar : is CarClass <|-- LuxuryCar : is CarClass <|-- AverageCar : is Car -- CarBrand : has Car -- CarClass : has RentContract -- CarBrand : has ReservationContract -- Car : has IContract <|-- Customer : has Customer <|--|> Adress : has IContract <|-- RentContract : is IContract <|-- ReservationContract class Customer{ +string Name +string Firstname +Adress Adress } class Adress{ +string Street } class Car{ +CarClass CarClass +Type Type } class CarClass { } class CarBrand { +string Name } class IContract { +Date Start +Date End +Customer Customer } class ReservationContract { +Car Car } class RentContract { +CarBrand CarBrand } Abweichungen: Adressen wurden der Einfachheit weggelsassen. Simple, Luxury und Average Car wurden zu Strings / Identifiers f\u00fcr die CarClass.","title":"Big Picture via C4-Pattern"},{"location":"C4/#big-picture-via-c4-pattern","text":"Der Sachbearbeiter kann Kunden mit Namen und Adresse und Kundennummer im System verwalten, d.h. erfassen, bearbeiten, l\u00f6schen und den Kunden mit dessen Namen oder Kundennummer suchen. Der Sachbearbeiter kann zudem die Autos von CarRent verwalten und nach denen suchen. Jedes Auto kann einer bestimmten Klasse zwischen Luxusklasse, Mittelklasse oder Einfachklasse zugeordnet werden und besitzt zudem eine Marke, einen Typ und eine eindeutige Identifikation. Jede Klasse besitzt eine Tagesgeb\u00fchr. Bei einer neuen Reservation kann der Kunde ein Auto aus einer bestimmten Klasse w\u00e4hlen. Er muss zudem die Anzahl der Tage (Start/Enddatum) angeben, die er das Auto gerne mieten m\u00f6chte. Dabei werden die Gesamtkosten berechnet. Wird die Reservation gespeichert, so wird sie mit einer Reservationsnummer ablegt. Bei Abholung des Autos wird die Reservation in einen Mietvertrag umgewandelt.","title":"Big Picture via C4-Pattern"},{"location":"C4/#context","text":"classDiagram PotentialCustomer -- User : Calls User -- CarRentWebApp : Interacts with CarRentWebApp -- CarRentAPI : Interacts with","title":"Context"},{"location":"C4/#container","text":"classDiagram CarRentBackend <--> CarRentFrontend : Transfair of Domain Objects CarRentBackend --> ContractMicroService : Returns CarRentBackend --> ContractMicroService","title":"Container"},{"location":"C4/#components","text":"Car Via CarController und Repo k\u00f6nnnen Autos verwaltet werden. ReservationContract Via ReservationContractController und Repo k\u00f6nnen Reservationen verwaltet werden. RentContract Via RentContractController und Repo k\u00f6nnen Reservationen in Mietvertr\u00e4ge umgewandelt werden und diese verwaltet werden. Customer Via CustomerController und Repo k\u00f6nnen Kunden verwaltet werden.","title":"Components"},{"location":"C4/#classes","text":"mermaid-link classDiagram CarClass \"x\" <|-- \"y\" SimpleCar : is CarClass <|-- LuxuryCar : is CarClass <|-- AverageCar : is Car -- CarBrand : has Car -- CarClass : has RentContract -- CarBrand : has ReservationContract -- Car : has IContract <|-- Customer : has Customer <|--|> Adress : has IContract <|-- RentContract : is IContract <|-- ReservationContract class Customer{ +string Name +string Firstname +Adress Adress } class Adress{ +string Street } class Car{ +CarClass CarClass +Type Type } class CarClass { } class CarBrand { +string Name } class IContract { +Date Start +Date End +Customer Customer } class ReservationContract { +Car Car } class RentContract { +CarBrand CarBrand } Abweichungen: Adressen wurden der Einfachheit weggelsassen. Simple, Luxury und Average Car wurden zu Strings / Identifiers f\u00fcr die CarClass.","title":"Classes"},{"location":"Dokumentation/","text":"Dokumentation Qualit\u00e4tsbaum f\u00fcr NFR Unittests --> Absicherung von Maintainability Intuitives & modernes UI --> Verminderung von Einarbeitungszeiten --> Erh\u00f6hrung von Effizienz Reliability --> Das System soll 99% verf\u00fcgbar sein. Diese 3 sind die Hauptziele f\u00fcr das weiterentwickeln unserer Applikaiton. Teststrategie / -planung Repositories werden getested bei einem eventuellen Prod Rollout mit 100% Unittests Ansonsten Unit und Integrationtesting wo sinnvoll. Mit dieser Testabdeckung sollten wir auf der Goldenen 80 / 20 regel sein. Metrikdefinition 100% Unittest abdeckung in Repositories Keine SonarCube Code-Smells Keine veralteten Libraries Anhand dieser Metriken bewerten wir den Source Code","title":"Dokumentation"},{"location":"Dokumentation/#dokumentation","text":"","title":"Dokumentation"},{"location":"Dokumentation/#qualitatsbaum-fur-nfr","text":"Unittests --> Absicherung von Maintainability Intuitives & modernes UI --> Verminderung von Einarbeitungszeiten --> Erh\u00f6hrung von Effizienz Reliability --> Das System soll 99% verf\u00fcgbar sein. Diese 3 sind die Hauptziele f\u00fcr das weiterentwickeln unserer Applikaiton.","title":"Qualit\u00e4tsbaum f\u00fcr NFR"},{"location":"Dokumentation/#teststrategie-planung","text":"Repositories werden getested bei einem eventuellen Prod Rollout mit 100% Unittests Ansonsten Unit und Integrationtesting wo sinnvoll. Mit dieser Testabdeckung sollten wir auf der Goldenen 80 / 20 regel sein.","title":"Teststrategie / -planung"},{"location":"Dokumentation/#metrikdefinition","text":"100% Unittest abdeckung in Repositories Keine SonarCube Code-Smells Keine veralteten Libraries Anhand dieser Metriken bewerten wir den Source Code","title":"Metrikdefinition"},{"location":"Domain-Model/","text":"Domain Model Im Car Rent sind uns 4 erschiedene Dom\u00e4nen bekannt. Car Autos mit Marke und Klasse Customer Mit Adresse und Personenangaben ReservationContract Reservierungen mit Verkn\u00fcpfung zur Person und zur Klasse RentContract Ausleihe mit Verkn\u00fcpfung zum Auto und der Person. Umwandlung einer Reservierung zu einer Ausleihe classDiagram Car <-- CarBrand Car <-- CarClass RentContract <--> Car RentContract <--> Customer ReservationContract -- RentContract ReservationContract <-- CarClass ReservationContract <-- Customer","title":"Domain Model"},{"location":"Domain-Model/#domain-model","text":"Im Car Rent sind uns 4 erschiedene Dom\u00e4nen bekannt. Car Autos mit Marke und Klasse Customer Mit Adresse und Personenangaben ReservationContract Reservierungen mit Verkn\u00fcpfung zur Person und zur Klasse RentContract Ausleihe mit Verkn\u00fcpfung zum Auto und der Person. Umwandlung einer Reservierung zu einer Ausleihe classDiagram Car <-- CarBrand Car <-- CarClass RentContract <--> Car RentContract <--> Customer ReservationContract -- RentContract ReservationContract <-- CarClass ReservationContract <-- Customer","title":"Domain Model"},{"location":"Use-Cases/","text":"Use-Cases F\u00fcr die Klare strukturierung werden Use-Cases pro Dom\u00e4nenobjekt bereitgestellt, da es sich hierbei um ein \u00fcberschaubares kleines Beispiel handelt. In einem gr\u00f6ssen Projekt, w\u00e4re w\u00fcnschenswert die einzelnen Dom\u00e4nen in verschiedene Boards oder Lanes zu unterteilen. Um so die einzelnen Tasks besser zuteilen zu k\u00f6nnen, f\u00fcr eine einfachere Zusammenarbeit. Customerverwaltung Als User m\u00f6chte ich Customers via allen CRUD Operation verwalten k\u00f6nnen. Ein Customer soll die Informationen Namen, Adresse und Kundennummer haben und kann mit der Kundennummer oder mit dem Namen gefunden werden. Carverwaltung Als User m\u00f6chte ich Cars via allen CRUD Operationen verwalten k\u00f6nnen. Bei einem Car soll zwischen Luxus, Mittel und Einfachklasse unterschieden werden k\u00f6nnen und ich m\u00f6chte zudem jeder Klasse eine Tagesgeb\u00fchr zuordnen k\u00f6nnen. Ein Car soll ausserdem die Marke, den Typ und einen unique Identifier haben. Dazu kommt, dass ich das Car als Benutzer finden m\u00f6chte z.B. \u00fcber dessen Id. ReservationContractverwaltung Als Customer m\u00f6chte ich ein Auto \u00fcber ein bestimmten Zeitraum ausleihen k\u00f6nnen und die Gesammtkosten kennen. Als User m\u00f6chte ich einen ReservationContract erstellen und verwalten k\u00f6nnen. Dabei soll das Start und Enddatum, Gesammtkosten und Klasse des Autos angegeben werden k\u00f6nnen. Wird der ReservationContract gespeichert, so soll er eine eindeutige ID erhalten. RentContractverwaltung Als User m\u00f6chte ich bei der Abholung des Cars einen ReservationContract in einen RentContract umwandeln. Anschliessend m\u00f6chte ich als User den Contract verwalten und auffinden k\u00f6nnen.","title":"Use-Cases"},{"location":"Use-Cases/#use-cases","text":"F\u00fcr die Klare strukturierung werden Use-Cases pro Dom\u00e4nenobjekt bereitgestellt, da es sich hierbei um ein \u00fcberschaubares kleines Beispiel handelt. In einem gr\u00f6ssen Projekt, w\u00e4re w\u00fcnschenswert die einzelnen Dom\u00e4nen in verschiedene Boards oder Lanes zu unterteilen. Um so die einzelnen Tasks besser zuteilen zu k\u00f6nnen, f\u00fcr eine einfachere Zusammenarbeit.","title":"Use-Cases"},{"location":"Use-Cases/#customerverwaltung","text":"Als User m\u00f6chte ich Customers via allen CRUD Operation verwalten k\u00f6nnen. Ein Customer soll die Informationen Namen, Adresse und Kundennummer haben und kann mit der Kundennummer oder mit dem Namen gefunden werden.","title":"Customerverwaltung"},{"location":"Use-Cases/#carverwaltung","text":"Als User m\u00f6chte ich Cars via allen CRUD Operationen verwalten k\u00f6nnen. Bei einem Car soll zwischen Luxus, Mittel und Einfachklasse unterschieden werden k\u00f6nnen und ich m\u00f6chte zudem jeder Klasse eine Tagesgeb\u00fchr zuordnen k\u00f6nnen. Ein Car soll ausserdem die Marke, den Typ und einen unique Identifier haben. Dazu kommt, dass ich das Car als Benutzer finden m\u00f6chte z.B. \u00fcber dessen Id.","title":"Carverwaltung"},{"location":"Use-Cases/#reservationcontractverwaltung","text":"Als Customer m\u00f6chte ich ein Auto \u00fcber ein bestimmten Zeitraum ausleihen k\u00f6nnen und die Gesammtkosten kennen. Als User m\u00f6chte ich einen ReservationContract erstellen und verwalten k\u00f6nnen. Dabei soll das Start und Enddatum, Gesammtkosten und Klasse des Autos angegeben werden k\u00f6nnen. Wird der ReservationContract gespeichert, so soll er eine eindeutige ID erhalten.","title":"ReservationContractverwaltung"},{"location":"Use-Cases/#rentcontractverwaltung","text":"Als User m\u00f6chte ich bei der Abholung des Cars einen ReservationContract in einen RentContract umwandeln. Anschliessend m\u00f6chte ich als User den Contract verwalten und auffinden k\u00f6nnen.","title":"RentContractverwaltung"},{"location":"mkdocs/","text":"How To MkDocs Ist nur hier f\u00fcr den Zuk\u00fcnftigen , der das gerne mal lesen w\u00fcrde und MkDocs vergessen hat For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"How To MkDocs"},{"location":"mkdocs/#how-to-mkdocs","text":"Ist nur hier f\u00fcr den Zuk\u00fcnftigen , der das gerne mal lesen w\u00fcrde und MkDocs vergessen hat For full documentation visit mkdocs.org .","title":"How To MkDocs"},{"location":"mkdocs/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}